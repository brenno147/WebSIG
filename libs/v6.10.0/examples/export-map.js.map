{"version":3,"file":"export-map.js","mappings":"uLAUMA,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAU,CACZC,OAAQ,IAAIC,EAAAA,IAEd,IAAIC,EAAAA,EAAY,CACdF,OAAQ,IAAIG,EAAAA,EAAa,CACvBC,IAAK,iCACLC,OAAQ,IAAIC,EAAAA,IAEdC,QAAS,KAEX,IAAIC,EAAAA,EAAa,CACfR,OAAQ,IAAIG,EAAAA,EAAa,CACvBC,IAAK,oCACLC,OAAQ,IAAIC,EAAAA,IAEdG,OAAQ,SAAUC,GAChB,OAAOA,EAAQC,IAAI,cAAgB,KAErCC,OAAQ,GACRC,KAAM,GACNN,QAAS,MAGbO,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9DzB,EAAI0B,KAAK,kBAAkB,WACzB,IAAMC,EAAYJ,SAASK,cAAc,UACnCC,EAAO7B,EAAI8B,UACjBH,EAAUI,MAAQF,EAAK,GACvBF,EAAUK,OAASH,EAAK,GACxB,IAAMI,EAAaN,EAAUO,WAAW,MAmCxC,GAlCAC,MAAMC,UAAUC,QAAQC,KACtBtC,EAAIuC,cAAcC,iBAAiB,sCACnC,SAAUC,GACR,GAAIA,EAAOV,MAAQ,EAAG,CACpB,IAGIW,EAHE/B,EACJ8B,EAAOE,WAAWC,MAAMjC,SAAW8B,EAAOG,MAAMjC,QAClDsB,EAAWY,YAA0B,KAAZlC,EAAiB,EAAImC,OAAOnC,GAErD,IAAMoC,EAAYN,EAAOG,MAAMG,UAG7BL,EAFEK,EAEOA,EACNC,MAAM,wBAAwB,GAC9BC,MAAM,KACNjD,IAAI8C,QAEE,CACPI,WAAWT,EAAOG,MAAMb,OAASU,EAAOV,MACxC,EACA,EACAmB,WAAWT,EAAOG,MAAMZ,QAAUS,EAAOT,OACzC,EACA,GAIJmB,yBAAyBf,UAAUgB,aAAaC,MAC9CpB,EACAS,GAEFT,EAAWqB,UAAUb,EAAQ,EAAG,OAIlCc,UAAUC,WAEZD,UAAUC,WAAW7B,EAAU8B,WAAY,eACtC,CACL,IAAMC,EAAOnC,SAASC,eAAe,kBACrCkC,EAAKC,KAAOhC,EAAUiC,YACtBF,EAAKG,YAGT7D,EAAI8D,kB","sources":["webpack:///./export-map.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  Heatmap as HeatmapLayer,\n  Tile as TileLayer,\n  Vector as VectorLayer,\n} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    new VectorLayer({\n      source: new VectorSource({\n        url: 'data/geojson/countries.geojson',\n        format: new GeoJSON(),\n      }),\n      opacity: 0.5,\n    }),\n    new HeatmapLayer({\n      source: new VectorSource({\n        url: 'data/geojson/world-cities.geojson',\n        format: new GeoJSON(),\n      }),\n      weight: function (feature) {\n        return feature.get('population') / 1e7;\n      },\n      radius: 15,\n      blur: 15,\n      opacity: 0.5,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndocument.getElementById('export-png').addEventListener('click', function () {\n  map.once('rendercomplete', function () {\n    const mapCanvas = document.createElement('canvas');\n    const size = map.getSize();\n    mapCanvas.width = size[0];\n    mapCanvas.height = size[1];\n    const mapContext = mapCanvas.getContext('2d');\n    Array.prototype.forEach.call(\n      map.getViewport().querySelectorAll('.ol-layer canvas, canvas.ol-layer'),\n      function (canvas) {\n        if (canvas.width > 0) {\n          const opacity =\n            canvas.parentNode.style.opacity || canvas.style.opacity;\n          mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\n          let matrix;\n          const transform = canvas.style.transform;\n          if (transform) {\n            // Get the transform parameters from the style's transform matrix\n            matrix = transform\n              .match(/^matrix\\(([^\\(]*)\\)$/)[1]\n              .split(',')\n              .map(Number);\n          } else {\n            matrix = [\n              parseFloat(canvas.style.width) / canvas.width,\n              0,\n              0,\n              parseFloat(canvas.style.height) / canvas.height,\n              0,\n              0,\n            ];\n          }\n          // Apply the transform to the export map context\n          CanvasRenderingContext2D.prototype.setTransform.apply(\n            mapContext,\n            matrix\n          );\n          mapContext.drawImage(canvas, 0, 0);\n        }\n      }\n    );\n    if (navigator.msSaveBlob) {\n      // link download attribute does not work on MS browsers\n      navigator.msSaveBlob(mapCanvas.msToBlob(), 'map.png');\n    } else {\n      const link = document.getElementById('image-download');\n      link.href = mapCanvas.toDataURL();\n      link.click();\n    }\n  });\n  map.renderSync();\n});\n"],"names":["map","Map","layers","TileLayer","source","OSM","VectorLayer","VectorSource","url","format","GeoJSON","opacity","HeatmapLayer","weight","feature","get","radius","blur","target","view","View","center","zoom","document","getElementById","addEventListener","once","mapCanvas","createElement","size","getSize","width","height","mapContext","getContext","Array","prototype","forEach","call","getViewport","querySelectorAll","canvas","matrix","parentNode","style","globalAlpha","Number","transform","match","split","parseFloat","CanvasRenderingContext2D","setTransform","apply","drawImage","navigator","msSaveBlob","msToBlob","link","href","toDataURL","click","renderSync"],"sourceRoot":""}